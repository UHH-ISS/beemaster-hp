# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pybroker')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pybroker')
    _pybroker = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pybroker', [dirname(__file__)])
        except ImportError:
            import _pybroker
            return _pybroker
        if fp is not None:
            try:
                _mod = imp.load_module('_pybroker', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pybroker = swig_import_helper()
    del swig_import_helper
else:
    import _pybroker
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pybroker.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pybroker.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pybroker.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pybroker.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pybroker.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pybroker.SwigPyIterator_copy(self)

    def next(self):
        return _pybroker.SwigPyIterator_next(self)

    def __next__(self):
        return _pybroker.SwigPyIterator___next__(self)

    def previous(self):
        return _pybroker.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pybroker.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pybroker.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pybroker.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pybroker.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pybroker.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pybroker.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pybroker.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pybroker.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def init(flags=0):
    return _pybroker.init(flags)
init = _pybroker.init

def done():
    return _pybroker.done()
done = _pybroker.done

def strerror(broker_errno):
    return _pybroker.strerror(broker_errno)
strerror = _pybroker.strerror

def strerror_r(broker_errno, buf, buflen):
    return _pybroker.strerror_r(broker_errno, buf, buflen)
strerror_r = _pybroker.strerror_r
class address(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, address, name)
    __repr__ = _swig_repr
    family_ipv4 = _pybroker.address_family_ipv4
    family_ipv6 = _pybroker.address_family_ipv6
    byte_order_host = _pybroker.address_byte_order_host
    byte_order_network = _pybroker.address_byte_order_network

    def __init__(self, *args):
        this = _pybroker.new_address(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def mask(self, top_bits_to_keep):
        return _pybroker.address_mask(self, top_bits_to_keep)

    def is_v4(self):
        return _pybroker.address_is_v4(self)

    def is_v6(self):
        return _pybroker.address_is_v6(self)

    def bytes(self):
        return _pybroker.address_bytes(self)

    def __str__(self):
        return _pybroker.address___str__(self)

    def __eq__(self, other):
        return _pybroker.address___eq__(self, other)

    def __lt__(self, other):
        return _pybroker.address___lt__(self, other)
    if _newclass:
        from_string = staticmethod(_pybroker.address_from_string)
    else:
        from_string = _pybroker.address_from_string
    __swig_destroy__ = _pybroker.delete_address
    __del__ = lambda self: None
address_swigregister = _pybroker.address_swigregister
address_swigregister(address)
cvar = _pybroker.cvar
address.v4_mapped_prefix = _pybroker.cvar.address_v4_mapped_prefix

def address_from_string(s):
    return _pybroker.address_from_string(s)
address_from_string = _pybroker.address_from_string

class subnet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subnet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subnet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybroker.new_subnet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def contains(self, addr):
        return _pybroker.subnet_contains(self, addr)

    def network(self):
        return _pybroker.subnet_network(self)

    def length(self):
        return _pybroker.subnet_length(self)

    def __str__(self):
        return _pybroker.subnet___str__(self)

    def __eq__(self, other):
        return _pybroker.subnet___eq__(self, other)

    def __lt__(self, other):
        return _pybroker.subnet___lt__(self, other)
    __swig_destroy__ = _pybroker.delete_subnet
    __del__ = lambda self: None
subnet_swigregister = _pybroker.subnet_swigregister
subnet_swigregister(subnet)

class port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, port, name)
    __repr__ = _swig_repr
    protocol_unknown = _pybroker.port_protocol_unknown
    protocol_tcp = _pybroker.port_protocol_tcp
    protocol_udp = _pybroker.port_protocol_udp
    protocol_icmp = _pybroker.port_protocol_icmp

    def __init__(self, *args):
        this = _pybroker.new_port(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def number(self):
        return _pybroker.port_number(self)

    def type(self):
        return _pybroker.port_type(self)

    def __str__(self):
        return _pybroker.port___str__(self)

    def __eq__(self, other):
        return _pybroker.port___eq__(self, other)

    def __lt__(self, other):
        return _pybroker.port___lt__(self, other)
    __swig_destroy__ = _pybroker.delete_port
    __del__ = lambda self: None
port_swigregister = _pybroker.port_swigregister
port_swigregister(port)

class time_duration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, time_duration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, time_duration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybroker.new_time_duration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, rhs):
        return _pybroker.time_duration___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _pybroker.time_duration___isub__(self, rhs)

    def __imul__(self, rhs):
        return _pybroker.time_duration___imul__(self, rhs)

    def __idiv__(self, rhs):
        return _pybroker.time_duration___idiv__(self, rhs)
    __swig_setmethods__["value"] = _pybroker.time_duration_value_set
    __swig_getmethods__["value"] = _pybroker.time_duration_value_get
    if _newclass:
        value = _swig_property(_pybroker.time_duration_value_get, _pybroker.time_duration_value_set)
    __swig_destroy__ = _pybroker.delete_time_duration
    __del__ = lambda self: None
time_duration_swigregister = _pybroker.time_duration_swigregister
time_duration_swigregister(time_duration)


def __mul__(lhs, rhs):
    return _pybroker.__mul__(lhs, rhs)
__mul__ = _pybroker.__mul__

def __div__(lhs, rhs):
    return _pybroker.__div__(lhs, rhs)
__div__ = _pybroker.__div__
class time_point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, time_point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, time_point, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybroker.new_time_point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        now = staticmethod(_pybroker.time_point_now)
    else:
        now = _pybroker.time_point_now

    def __iadd__(self, rhs):
        return _pybroker.time_point___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _pybroker.time_point___isub__(self, rhs)
    __swig_setmethods__["value"] = _pybroker.time_point_value_set
    __swig_getmethods__["value"] = _pybroker.time_point_value_get
    if _newclass:
        value = _swig_property(_pybroker.time_point_value_get, _pybroker.time_point_value_set)
    __swig_destroy__ = _pybroker.delete_time_point
    __del__ = lambda self: None
time_point_swigregister = _pybroker.time_point_swigregister
time_point_swigregister(time_point)

def time_point_now():
    return _pybroker.time_point_now()
time_point_now = _pybroker.time_point_now


def __add__(*args):
    return _pybroker.__add__(*args)
__add__ = _pybroker.__add__

def __sub__(*args):
    return _pybroker.__sub__(*args)
__sub__ = _pybroker.__sub__
class enum_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, enum_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, enum_value, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybroker.new_enum_value(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["name"] = _pybroker.enum_value_name_set
    __swig_getmethods__["name"] = _pybroker.enum_value_name_get
    if _newclass:
        name = _swig_property(_pybroker.enum_value_name_get, _pybroker.enum_value_name_set)
    __swig_destroy__ = _pybroker.delete_enum_value
    __del__ = lambda self: None
enum_value_swigregister = _pybroker.enum_value_swigregister
enum_value_swigregister(enum_value)


def __lt__(*args):
    return _pybroker.__lt__(*args)
__lt__ = _pybroker.__lt__

def __lshift__(*args):
    return _pybroker.__lshift__(*args)
__lshift__ = _pybroker.__lshift__
class peering(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, peering, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, peering, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_peering
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_peering(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def remote(self):
        return _pybroker.peering_remote(self)

    def remote_tuple(self):
        return _pybroker.peering_remote_tuple(self)

    def __nonzero__(self):
        return _pybroker.peering___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, rhs):
        return _pybroker.peering___eq__(self, rhs)
peering_swigregister = _pybroker.peering_swigregister
peering_swigregister(peering)

class field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, field, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybroker.new_field(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        return _pybroker.field_get(self)

    def valid(self):
        return _pybroker.field_valid(self)
    __swig_destroy__ = _pybroker.delete_field
    __del__ = lambda self: None
field_swigregister = _pybroker.field_swigregister
field_swigregister(field)

class vector_of_field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_field, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pybroker.vector_of_field_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pybroker.vector_of_field___nonzero__(self)

    def __bool__(self):
        return _pybroker.vector_of_field___bool__(self)

    def __len__(self):
        return _pybroker.vector_of_field___len__(self)

    def __getslice__(self, i, j):
        return _pybroker.vector_of_field___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pybroker.vector_of_field___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pybroker.vector_of_field___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pybroker.vector_of_field___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pybroker.vector_of_field___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pybroker.vector_of_field___setitem__(self, *args)

    def pop(self):
        return _pybroker.vector_of_field_pop(self)

    def append(self, x):
        return _pybroker.vector_of_field_append(self, x)

    def empty(self):
        return _pybroker.vector_of_field_empty(self)

    def size(self):
        return _pybroker.vector_of_field_size(self)

    def swap(self, v):
        return _pybroker.vector_of_field_swap(self, v)

    def begin(self):
        return _pybroker.vector_of_field_begin(self)

    def end(self):
        return _pybroker.vector_of_field_end(self)

    def rbegin(self):
        return _pybroker.vector_of_field_rbegin(self)

    def rend(self):
        return _pybroker.vector_of_field_rend(self)

    def clear(self):
        return _pybroker.vector_of_field_clear(self)

    def get_allocator(self):
        return _pybroker.vector_of_field_get_allocator(self)

    def pop_back(self):
        return _pybroker.vector_of_field_pop_back(self)

    def erase(self, *args):
        return _pybroker.vector_of_field_erase(self, *args)

    def __init__(self, *args):
        this = _pybroker.new_vector_of_field(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pybroker.vector_of_field_push_back(self, x)

    def front(self):
        return _pybroker.vector_of_field_front(self)

    def back(self):
        return _pybroker.vector_of_field_back(self)

    def assign(self, n, x):
        return _pybroker.vector_of_field_assign(self, n, x)

    def resize(self, *args):
        return _pybroker.vector_of_field_resize(self, *args)

    def insert(self, *args):
        return _pybroker.vector_of_field_insert(self, *args)

    def reserve(self, n):
        return _pybroker.vector_of_field_reserve(self, n)

    def capacity(self):
        return _pybroker.vector_of_field_capacity(self)
    __swig_destroy__ = _pybroker.delete_vector_of_field
    __del__ = lambda self: None
vector_of_field_swigregister = _pybroker.vector_of_field_swigregister
vector_of_field_swigregister(vector_of_field)

class record(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, record, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, record, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybroker.new_record(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        return _pybroker.record_size(self)

    def __str__(self):
        return _pybroker.record___str__(self)

    def __eq__(self, other):
        return _pybroker.record___eq__(self, other)

    def __lt__(self, other):
        return _pybroker.record___lt__(self, other)

    def fields(self):
        return _pybroker.record_fields(self)
    __swig_destroy__ = _pybroker.delete_record
    __del__ = lambda self: None
record_swigregister = _pybroker.record_swigregister
record_swigregister(record)

class data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data, name)
    __repr__ = _swig_repr
    tag_boolean = _pybroker.data_tag_boolean
    tag_count = _pybroker.data_tag_count
    tag_integer = _pybroker.data_tag_integer
    tag_real = _pybroker.data_tag_real
    tag_string = _pybroker.data_tag_string
    tag_address = _pybroker.data_tag_address
    tag_subnet = _pybroker.data_tag_subnet
    tag_port = _pybroker.data_tag_port
    tag_time = _pybroker.data_tag_time
    tag_duration = _pybroker.data_tag_duration
    tag_enum_value = _pybroker.data_tag_enum_value
    tag_set = _pybroker.data_tag_set
    tag_table = _pybroker.data_tag_table
    tag_vector = _pybroker.data_tag_vector
    tag_record = _pybroker.data_tag_record

    def __init__(self, *args):
        this = _pybroker.new_data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _pybroker.data___str__(self)

    def __eq__(self, other):
        return _pybroker.data___eq__(self, other)

    def __lt__(self, other):
        return _pybroker.data___lt__(self, other)

    def which(self):
        return _pybroker.data_which(self)

    def as_bool(self):
        return _pybroker.data_as_bool(self)

    def as_count(self):
        return _pybroker.data_as_count(self)

    def as_int(self):
        return _pybroker.data_as_int(self)

    def as_real(self):
        return _pybroker.data_as_real(self)

    def as_string(self):
        return _pybroker.data_as_string(self)

    def as_address(self):
        return _pybroker.data_as_address(self)

    def as_subnet(self):
        return _pybroker.data_as_subnet(self)

    def as_port(self):
        return _pybroker.data_as_port(self)

    def as_time(self):
        return _pybroker.data_as_time(self)

    def as_duration(self):
        return _pybroker.data_as_duration(self)

    def as_enum(self):
        return _pybroker.data_as_enum(self)

    def as_set(self):
        return _pybroker.data_as_set(self)

    def as_table(self):
        return _pybroker.data_as_table(self)

    def as_vector(self):
        return _pybroker.data_as_vector(self)

    def as_record(self):
        return _pybroker.data_as_record(self)
    __swig_destroy__ = _pybroker.delete_data
    __del__ = lambda self: None
data_swigregister = _pybroker.data_swigregister
data_swigregister(data)

class vector_of_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_data, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pybroker.vector_of_data_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pybroker.vector_of_data___nonzero__(self)

    def __bool__(self):
        return _pybroker.vector_of_data___bool__(self)

    def __len__(self):
        return _pybroker.vector_of_data___len__(self)

    def __getslice__(self, i, j):
        return _pybroker.vector_of_data___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pybroker.vector_of_data___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pybroker.vector_of_data___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pybroker.vector_of_data___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pybroker.vector_of_data___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pybroker.vector_of_data___setitem__(self, *args)

    def pop(self):
        return _pybroker.vector_of_data_pop(self)

    def append(self, x):
        return _pybroker.vector_of_data_append(self, x)

    def empty(self):
        return _pybroker.vector_of_data_empty(self)

    def size(self):
        return _pybroker.vector_of_data_size(self)

    def swap(self, v):
        return _pybroker.vector_of_data_swap(self, v)

    def begin(self):
        return _pybroker.vector_of_data_begin(self)

    def end(self):
        return _pybroker.vector_of_data_end(self)

    def rbegin(self):
        return _pybroker.vector_of_data_rbegin(self)

    def rend(self):
        return _pybroker.vector_of_data_rend(self)

    def clear(self):
        return _pybroker.vector_of_data_clear(self)

    def get_allocator(self):
        return _pybroker.vector_of_data_get_allocator(self)

    def pop_back(self):
        return _pybroker.vector_of_data_pop_back(self)

    def erase(self, *args):
        return _pybroker.vector_of_data_erase(self, *args)

    def __init__(self, *args):
        this = _pybroker.new_vector_of_data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pybroker.vector_of_data_push_back(self, x)

    def front(self):
        return _pybroker.vector_of_data_front(self)

    def back(self):
        return _pybroker.vector_of_data_back(self)

    def assign(self, n, x):
        return _pybroker.vector_of_data_assign(self, n, x)

    def resize(self, *args):
        return _pybroker.vector_of_data_resize(self, *args)

    def insert(self, *args):
        return _pybroker.vector_of_data_insert(self, *args)

    def reserve(self, n):
        return _pybroker.vector_of_data_reserve(self, n)

    def capacity(self):
        return _pybroker.vector_of_data_capacity(self)
    __swig_destroy__ = _pybroker.delete_vector_of_data
    __del__ = lambda self: None
vector_of_data_swigregister = _pybroker.vector_of_data_swigregister
vector_of_data_swigregister(vector_of_data)


message = vector_of_data

class set_of_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_of_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_of_data, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pybroker.set_of_data_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pybroker.set_of_data___nonzero__(self)

    def __bool__(self):
        return _pybroker.set_of_data___bool__(self)

    def __len__(self):
        return _pybroker.set_of_data___len__(self)

    def append(self, x):
        return _pybroker.set_of_data_append(self, x)

    def __contains__(self, x):
        return _pybroker.set_of_data___contains__(self, x)

    def __getitem__(self, i):
        return _pybroker.set_of_data___getitem__(self, i)

    def add(self, x):
        return _pybroker.set_of_data_add(self, x)

    def discard(self, x):
        return _pybroker.set_of_data_discard(self, x)

    def __init__(self, *args):
        this = _pybroker.new_set_of_data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _pybroker.set_of_data_empty(self)

    def size(self):
        return _pybroker.set_of_data_size(self)

    def clear(self):
        return _pybroker.set_of_data_clear(self)

    def swap(self, v):
        return _pybroker.set_of_data_swap(self, v)

    def count(self, x):
        return _pybroker.set_of_data_count(self, x)

    def begin(self):
        return _pybroker.set_of_data_begin(self)

    def end(self):
        return _pybroker.set_of_data_end(self)

    def rbegin(self):
        return _pybroker.set_of_data_rbegin(self)

    def rend(self):
        return _pybroker.set_of_data_rend(self)

    def erase(self, *args):
        return _pybroker.set_of_data_erase(self, *args)

    def find(self, x):
        return _pybroker.set_of_data_find(self, x)

    def lower_bound(self, x):
        return _pybroker.set_of_data_lower_bound(self, x)

    def upper_bound(self, x):
        return _pybroker.set_of_data_upper_bound(self, x)

    def equal_range(self, x):
        return _pybroker.set_of_data_equal_range(self, x)

    def insert(self, __x):
        return _pybroker.set_of_data_insert(self, __x)
    __swig_destroy__ = _pybroker.delete_set_of_data
    __del__ = lambda self: None
set_of_data_swigregister = _pybroker.set_of_data_swigregister
set_of_data_swigregister(set_of_data)

class map_of_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_of_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_of_data, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pybroker.map_of_data_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pybroker.map_of_data___nonzero__(self)

    def __bool__(self):
        return _pybroker.map_of_data___bool__(self)

    def __len__(self):
        return _pybroker.map_of_data___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pybroker.map_of_data___getitem__(self, key)

    def __delitem__(self, key):
        return _pybroker.map_of_data___delitem__(self, key)

    def has_key(self, key):
        return _pybroker.map_of_data_has_key(self, key)

    def keys(self):
        return _pybroker.map_of_data_keys(self)

    def values(self):
        return _pybroker.map_of_data_values(self)

    def items(self):
        return _pybroker.map_of_data_items(self)

    def __contains__(self, key):
        return _pybroker.map_of_data___contains__(self, key)

    def key_iterator(self):
        return _pybroker.map_of_data_key_iterator(self)

    def value_iterator(self):
        return _pybroker.map_of_data_value_iterator(self)

    def __setitem__(self, *args):
        return _pybroker.map_of_data___setitem__(self, *args)

    def asdict(self):
        return _pybroker.map_of_data_asdict(self)

    def __init__(self, *args):
        this = _pybroker.new_map_of_data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _pybroker.map_of_data_empty(self)

    def size(self):
        return _pybroker.map_of_data_size(self)

    def swap(self, v):
        return _pybroker.map_of_data_swap(self, v)

    def begin(self):
        return _pybroker.map_of_data_begin(self)

    def end(self):
        return _pybroker.map_of_data_end(self)

    def rbegin(self):
        return _pybroker.map_of_data_rbegin(self)

    def rend(self):
        return _pybroker.map_of_data_rend(self)

    def clear(self):
        return _pybroker.map_of_data_clear(self)

    def get_allocator(self):
        return _pybroker.map_of_data_get_allocator(self)

    def count(self, x):
        return _pybroker.map_of_data_count(self, x)

    def erase(self, *args):
        return _pybroker.map_of_data_erase(self, *args)

    def find(self, x):
        return _pybroker.map_of_data_find(self, x)

    def lower_bound(self, x):
        return _pybroker.map_of_data_lower_bound(self, x)

    def upper_bound(self, x):
        return _pybroker.map_of_data_upper_bound(self, x)
    __swig_destroy__ = _pybroker.delete_map_of_data
    __del__ = lambda self: None
map_of_data_swigregister = _pybroker.map_of_data_swigregister
map_of_data_swigregister(map_of_data)

class outgoing_connection_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, outgoing_connection_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, outgoing_connection_status, name)
    __repr__ = _swig_repr
    tag_established = _pybroker.outgoing_connection_status_tag_established
    tag_disconnected = _pybroker.outgoing_connection_status_tag_disconnected
    tag_incompatible = _pybroker.outgoing_connection_status_tag_incompatible
    __swig_setmethods__["relation"] = _pybroker.outgoing_connection_status_relation_set
    __swig_getmethods__["relation"] = _pybroker.outgoing_connection_status_relation_get
    if _newclass:
        relation = _swig_property(_pybroker.outgoing_connection_status_relation_get, _pybroker.outgoing_connection_status_relation_set)
    __swig_setmethods__["status"] = _pybroker.outgoing_connection_status_status_set
    __swig_getmethods__["status"] = _pybroker.outgoing_connection_status_status_get
    if _newclass:
        status = _swig_property(_pybroker.outgoing_connection_status_status_get, _pybroker.outgoing_connection_status_status_set)
    __swig_setmethods__["peer_name"] = _pybroker.outgoing_connection_status_peer_name_set
    __swig_getmethods__["peer_name"] = _pybroker.outgoing_connection_status_peer_name_get
    if _newclass:
        peer_name = _swig_property(_pybroker.outgoing_connection_status_peer_name_get, _pybroker.outgoing_connection_status_peer_name_set)

    def __init__(self):
        this = _pybroker.new_outgoing_connection_status()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybroker.delete_outgoing_connection_status
    __del__ = lambda self: None
outgoing_connection_status_swigregister = _pybroker.outgoing_connection_status_swigregister
outgoing_connection_status_swigregister(outgoing_connection_status)

class incoming_connection_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, incoming_connection_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, incoming_connection_status, name)
    __repr__ = _swig_repr
    tag_established = _pybroker.incoming_connection_status_tag_established
    tag_disconnected = _pybroker.incoming_connection_status_tag_disconnected
    __swig_setmethods__["status"] = _pybroker.incoming_connection_status_status_set
    __swig_getmethods__["status"] = _pybroker.incoming_connection_status_status_get
    if _newclass:
        status = _swig_property(_pybroker.incoming_connection_status_status_get, _pybroker.incoming_connection_status_status_set)
    __swig_setmethods__["peer_name"] = _pybroker.incoming_connection_status_peer_name_set
    __swig_getmethods__["peer_name"] = _pybroker.incoming_connection_status_peer_name_get
    if _newclass:
        peer_name = _swig_property(_pybroker.incoming_connection_status_peer_name_get, _pybroker.incoming_connection_status_peer_name_set)

    def __init__(self):
        this = _pybroker.new_incoming_connection_status()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybroker.delete_incoming_connection_status
    __del__ = lambda self: None
incoming_connection_status_swigregister = _pybroker.incoming_connection_status_swigregister
incoming_connection_status_swigregister(incoming_connection_status)


def __eq__(*args):
    return _pybroker.__eq__(*args)
__eq__ = _pybroker.__eq__
class deque_of_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deque_of_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deque_of_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pybroker.deque_of_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pybroker.deque_of_string___nonzero__(self)

    def __bool__(self):
        return _pybroker.deque_of_string___bool__(self)

    def __len__(self):
        return _pybroker.deque_of_string___len__(self)

    def __getslice__(self, i, j):
        return _pybroker.deque_of_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pybroker.deque_of_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pybroker.deque_of_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pybroker.deque_of_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pybroker.deque_of_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pybroker.deque_of_string___setitem__(self, *args)

    def pop(self):
        return _pybroker.deque_of_string_pop(self)

    def append(self, x):
        return _pybroker.deque_of_string_append(self, x)

    def empty(self):
        return _pybroker.deque_of_string_empty(self)

    def size(self):
        return _pybroker.deque_of_string_size(self)

    def swap(self, v):
        return _pybroker.deque_of_string_swap(self, v)

    def begin(self):
        return _pybroker.deque_of_string_begin(self)

    def end(self):
        return _pybroker.deque_of_string_end(self)

    def rbegin(self):
        return _pybroker.deque_of_string_rbegin(self)

    def rend(self):
        return _pybroker.deque_of_string_rend(self)

    def clear(self):
        return _pybroker.deque_of_string_clear(self)

    def get_allocator(self):
        return _pybroker.deque_of_string_get_allocator(self)

    def pop_back(self):
        return _pybroker.deque_of_string_pop_back(self)

    def erase(self, *args):
        return _pybroker.deque_of_string_erase(self, *args)

    def __init__(self, *args):
        this = _pybroker.new_deque_of_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pybroker.deque_of_string_push_back(self, x)

    def front(self):
        return _pybroker.deque_of_string_front(self)

    def back(self):
        return _pybroker.deque_of_string_back(self)

    def assign(self, n, x):
        return _pybroker.deque_of_string_assign(self, n, x)

    def resize(self, *args):
        return _pybroker.deque_of_string_resize(self, *args)

    def insert(self, *args):
        return _pybroker.deque_of_string_insert(self, *args)

    def pop_front(self):
        return _pybroker.deque_of_string_pop_front(self)

    def push_front(self, x):
        return _pybroker.deque_of_string_push_front(self, x)
    __swig_destroy__ = _pybroker.delete_deque_of_string
    __del__ = lambda self: None
deque_of_string_swigregister = _pybroker.deque_of_string_swigregister
deque_of_string_swigregister(deque_of_string)

class deque_of_message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deque_of_message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deque_of_message, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pybroker.deque_of_message_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pybroker.deque_of_message___nonzero__(self)

    def __bool__(self):
        return _pybroker.deque_of_message___bool__(self)

    def __len__(self):
        return _pybroker.deque_of_message___len__(self)

    def __getslice__(self, i, j):
        return _pybroker.deque_of_message___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pybroker.deque_of_message___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pybroker.deque_of_message___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pybroker.deque_of_message___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pybroker.deque_of_message___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pybroker.deque_of_message___setitem__(self, *args)

    def pop(self):
        return _pybroker.deque_of_message_pop(self)

    def append(self, x):
        return _pybroker.deque_of_message_append(self, x)

    def empty(self):
        return _pybroker.deque_of_message_empty(self)

    def size(self):
        return _pybroker.deque_of_message_size(self)

    def swap(self, v):
        return _pybroker.deque_of_message_swap(self, v)

    def begin(self):
        return _pybroker.deque_of_message_begin(self)

    def end(self):
        return _pybroker.deque_of_message_end(self)

    def rbegin(self):
        return _pybroker.deque_of_message_rbegin(self)

    def rend(self):
        return _pybroker.deque_of_message_rend(self)

    def clear(self):
        return _pybroker.deque_of_message_clear(self)

    def get_allocator(self):
        return _pybroker.deque_of_message_get_allocator(self)

    def pop_back(self):
        return _pybroker.deque_of_message_pop_back(self)

    def erase(self, *args):
        return _pybroker.deque_of_message_erase(self, *args)

    def __init__(self, *args):
        this = _pybroker.new_deque_of_message(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pybroker.deque_of_message_push_back(self, x)

    def front(self):
        return _pybroker.deque_of_message_front(self)

    def back(self):
        return _pybroker.deque_of_message_back(self)

    def assign(self, n, x):
        return _pybroker.deque_of_message_assign(self, n, x)

    def resize(self, *args):
        return _pybroker.deque_of_message_resize(self, *args)

    def insert(self, *args):
        return _pybroker.deque_of_message_insert(self, *args)

    def pop_front(self):
        return _pybroker.deque_of_message_pop_front(self)

    def push_front(self, x):
        return _pybroker.deque_of_message_push_front(self, x)
    __swig_destroy__ = _pybroker.delete_deque_of_message
    __del__ = lambda self: None
deque_of_message_swigregister = _pybroker.deque_of_message_swigregister
deque_of_message_swigregister(deque_of_message)

class message_queue_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, message_queue_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, message_queue_base, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_message_queue_base
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_message_queue_base(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fd(self):
        return _pybroker.message_queue_base_fd(self)

    def want_pop(self):
        return _pybroker.message_queue_base_want_pop(self)

    def need_pop(self):
        return _pybroker.message_queue_base_need_pop(self)

    def handle(self):
        return _pybroker.message_queue_base_handle(self)
message_queue_base_swigregister = _pybroker.message_queue_base_swigregister
message_queue_base_swigregister(message_queue_base)

class message_queue(message_queue_base):
    __swig_setmethods__ = {}
    for _s in [message_queue_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, message_queue, name, value)
    __swig_getmethods__ = {}
    for _s in [message_queue_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, message_queue, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_message_queue
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_message_queue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_topic_prefix(self):
        return _pybroker.message_queue_get_topic_prefix(self)

    def __nonzero__(self):
        return _pybroker.message_queue___nonzero__(self)
    __bool__ = __nonzero__


message_queue_swigregister = _pybroker.message_queue_swigregister
message_queue_swigregister(message_queue)
LOCAL_SCOPE = cvar.LOCAL_SCOPE
GLOBAL_SCOPE = cvar.GLOBAL_SCOPE

class deque_of_outgoing_connection_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deque_of_outgoing_connection_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deque_of_outgoing_connection_status, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pybroker.deque_of_outgoing_connection_status_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pybroker.deque_of_outgoing_connection_status___nonzero__(self)

    def __bool__(self):
        return _pybroker.deque_of_outgoing_connection_status___bool__(self)

    def __len__(self):
        return _pybroker.deque_of_outgoing_connection_status___len__(self)

    def __getslice__(self, i, j):
        return _pybroker.deque_of_outgoing_connection_status___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pybroker.deque_of_outgoing_connection_status___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pybroker.deque_of_outgoing_connection_status___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pybroker.deque_of_outgoing_connection_status___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pybroker.deque_of_outgoing_connection_status___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pybroker.deque_of_outgoing_connection_status___setitem__(self, *args)

    def pop(self):
        return _pybroker.deque_of_outgoing_connection_status_pop(self)

    def append(self, x):
        return _pybroker.deque_of_outgoing_connection_status_append(self, x)

    def empty(self):
        return _pybroker.deque_of_outgoing_connection_status_empty(self)

    def size(self):
        return _pybroker.deque_of_outgoing_connection_status_size(self)

    def swap(self, v):
        return _pybroker.deque_of_outgoing_connection_status_swap(self, v)

    def begin(self):
        return _pybroker.deque_of_outgoing_connection_status_begin(self)

    def end(self):
        return _pybroker.deque_of_outgoing_connection_status_end(self)

    def rbegin(self):
        return _pybroker.deque_of_outgoing_connection_status_rbegin(self)

    def rend(self):
        return _pybroker.deque_of_outgoing_connection_status_rend(self)

    def clear(self):
        return _pybroker.deque_of_outgoing_connection_status_clear(self)

    def get_allocator(self):
        return _pybroker.deque_of_outgoing_connection_status_get_allocator(self)

    def pop_back(self):
        return _pybroker.deque_of_outgoing_connection_status_pop_back(self)

    def erase(self, *args):
        return _pybroker.deque_of_outgoing_connection_status_erase(self, *args)

    def __init__(self, *args):
        this = _pybroker.new_deque_of_outgoing_connection_status(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pybroker.deque_of_outgoing_connection_status_push_back(self, x)

    def front(self):
        return _pybroker.deque_of_outgoing_connection_status_front(self)

    def back(self):
        return _pybroker.deque_of_outgoing_connection_status_back(self)

    def assign(self, n, x):
        return _pybroker.deque_of_outgoing_connection_status_assign(self, n, x)

    def resize(self, *args):
        return _pybroker.deque_of_outgoing_connection_status_resize(self, *args)

    def insert(self, *args):
        return _pybroker.deque_of_outgoing_connection_status_insert(self, *args)

    def pop_front(self):
        return _pybroker.deque_of_outgoing_connection_status_pop_front(self)

    def push_front(self, x):
        return _pybroker.deque_of_outgoing_connection_status_push_front(self, x)
    __swig_destroy__ = _pybroker.delete_deque_of_outgoing_connection_status
    __del__ = lambda self: None
deque_of_outgoing_connection_status_swigregister = _pybroker.deque_of_outgoing_connection_status_swigregister
deque_of_outgoing_connection_status_swigregister(deque_of_outgoing_connection_status)

class outgoing_connection_status_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, outgoing_connection_status_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, outgoing_connection_status_queue, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_outgoing_connection_status_queue
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_outgoing_connection_status_queue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fd(self):
        return _pybroker.outgoing_connection_status_queue_fd(self)

    def want_pop(self):
        return _pybroker.outgoing_connection_status_queue_want_pop(self)

    def need_pop(self):
        return _pybroker.outgoing_connection_status_queue_need_pop(self)

    def handle(self):
        return _pybroker.outgoing_connection_status_queue_handle(self)
outgoing_connection_status_queue_swigregister = _pybroker.outgoing_connection_status_queue_swigregister
outgoing_connection_status_queue_swigregister(outgoing_connection_status_queue)

class deque_of_incoming_connection_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deque_of_incoming_connection_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deque_of_incoming_connection_status, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pybroker.deque_of_incoming_connection_status_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pybroker.deque_of_incoming_connection_status___nonzero__(self)

    def __bool__(self):
        return _pybroker.deque_of_incoming_connection_status___bool__(self)

    def __len__(self):
        return _pybroker.deque_of_incoming_connection_status___len__(self)

    def __getslice__(self, i, j):
        return _pybroker.deque_of_incoming_connection_status___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pybroker.deque_of_incoming_connection_status___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pybroker.deque_of_incoming_connection_status___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pybroker.deque_of_incoming_connection_status___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pybroker.deque_of_incoming_connection_status___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pybroker.deque_of_incoming_connection_status___setitem__(self, *args)

    def pop(self):
        return _pybroker.deque_of_incoming_connection_status_pop(self)

    def append(self, x):
        return _pybroker.deque_of_incoming_connection_status_append(self, x)

    def empty(self):
        return _pybroker.deque_of_incoming_connection_status_empty(self)

    def size(self):
        return _pybroker.deque_of_incoming_connection_status_size(self)

    def swap(self, v):
        return _pybroker.deque_of_incoming_connection_status_swap(self, v)

    def begin(self):
        return _pybroker.deque_of_incoming_connection_status_begin(self)

    def end(self):
        return _pybroker.deque_of_incoming_connection_status_end(self)

    def rbegin(self):
        return _pybroker.deque_of_incoming_connection_status_rbegin(self)

    def rend(self):
        return _pybroker.deque_of_incoming_connection_status_rend(self)

    def clear(self):
        return _pybroker.deque_of_incoming_connection_status_clear(self)

    def get_allocator(self):
        return _pybroker.deque_of_incoming_connection_status_get_allocator(self)

    def pop_back(self):
        return _pybroker.deque_of_incoming_connection_status_pop_back(self)

    def erase(self, *args):
        return _pybroker.deque_of_incoming_connection_status_erase(self, *args)

    def __init__(self, *args):
        this = _pybroker.new_deque_of_incoming_connection_status(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pybroker.deque_of_incoming_connection_status_push_back(self, x)

    def front(self):
        return _pybroker.deque_of_incoming_connection_status_front(self)

    def back(self):
        return _pybroker.deque_of_incoming_connection_status_back(self)

    def assign(self, n, x):
        return _pybroker.deque_of_incoming_connection_status_assign(self, n, x)

    def resize(self, *args):
        return _pybroker.deque_of_incoming_connection_status_resize(self, *args)

    def insert(self, *args):
        return _pybroker.deque_of_incoming_connection_status_insert(self, *args)

    def pop_front(self):
        return _pybroker.deque_of_incoming_connection_status_pop_front(self)

    def push_front(self, x):
        return _pybroker.deque_of_incoming_connection_status_push_front(self, x)
    __swig_destroy__ = _pybroker.delete_deque_of_incoming_connection_status
    __del__ = lambda self: None
deque_of_incoming_connection_status_swigregister = _pybroker.deque_of_incoming_connection_status_swigregister
deque_of_incoming_connection_status_swigregister(deque_of_incoming_connection_status)

class incoming_connection_status_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, incoming_connection_status_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, incoming_connection_status_queue, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_incoming_connection_status_queue
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_incoming_connection_status_queue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fd(self):
        return _pybroker.incoming_connection_status_queue_fd(self)

    def want_pop(self):
        return _pybroker.incoming_connection_status_queue_want_pop(self)

    def need_pop(self):
        return _pybroker.incoming_connection_status_queue_need_pop(self)

    def handle(self):
        return _pybroker.incoming_connection_status_queue_handle(self)
incoming_connection_status_queue_swigregister = _pybroker.incoming_connection_status_queue_swigregister
incoming_connection_status_queue_swigregister(incoming_connection_status_queue)

class endpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, endpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, endpoint, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_endpoint
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_endpoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def name(self):
        return _pybroker.endpoint_name(self)

    def flags(self):
        return _pybroker.endpoint_flags(self)

    def set_flags(self, flags):
        return _pybroker.endpoint_set_flags(self, flags)

    def last_errno(self):
        return _pybroker.endpoint_last_errno(self)

    def last_error(self):
        return _pybroker.endpoint_last_error(self)

    def listen(self, port, addr=None, reuse_addr=True):
        return _pybroker.endpoint_listen(self, port, addr, reuse_addr)

    def unlisten(self, port):
        return _pybroker.endpoint_unlisten(self, port)

    def peer(self, *args):
        return _pybroker.endpoint_peer(self, *args)

    def unpeer(self, p):
        return _pybroker.endpoint_unpeer(self, p)

    def outgoing_connection_status(self):
        return _pybroker.endpoint_outgoing_connection_status(self)

    def incoming_connection_status(self):
        return _pybroker.endpoint_incoming_connection_status(self)

    def send(self, *args):
        return _pybroker.endpoint_send(self, *args)

    def publish(self, t):
        return _pybroker.endpoint_publish(self, t)

    def unpublish(self, t):
        return _pybroker.endpoint_unpublish(self, t)

    def advertise(self, t):
        return _pybroker.endpoint_advertise(self, t)

    def unadvertise(self, t):
        return _pybroker.endpoint_unadvertise(self, t)

    def handle(self):
        return _pybroker.endpoint_handle(self)
endpoint_swigregister = _pybroker.endpoint_swigregister
endpoint_swigregister(endpoint)
AUTO_PUBLISH = cvar.AUTO_PUBLISH
AUTO_ADVERTISE = cvar.AUTO_ADVERTISE
AUTO_ROUTING = cvar.AUTO_ROUTING
SELF = cvar.SELF
PEERS = cvar.PEERS
UNSOLICITED = cvar.UNSOLICITED
MAX_TTL_COUNT = cvar.MAX_TTL_COUNT

level_debug = _pybroker.level_debug
level_info = _pybroker.level_info
level_warn = _pybroker.level_warn
level_error = _pybroker.level_error

def report_init(with_default_queue=False):
    return _pybroker.report_init(with_default_queue)
report_init = _pybroker.report_init

def report_done():
    return _pybroker.report_done()
report_done = _pybroker.report_done

def report_send(lvl, subtopic, msg):
    return _pybroker.report_send(lvl, subtopic, msg)
report_send = _pybroker.report_send

def report_info(subtopic, msg):
    return _pybroker.report_info(subtopic, msg)
report_info = _pybroker.report_info

def report_warn(subtopic, msg):
    return _pybroker.report_warn(subtopic, msg)
report_warn = _pybroker.report_warn

def report_error(subtopic, msg):
    return _pybroker.report_error(subtopic, msg)
report_error = _pybroker.report_error
class expiration_time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, expiration_time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, expiration_time, name)
    __repr__ = _swig_repr
    __swig_setmethods__["expiry_time"] = _pybroker.expiration_time_expiry_time_set
    __swig_getmethods__["expiry_time"] = _pybroker.expiration_time_expiry_time_get
    if _newclass:
        expiry_time = _swig_property(_pybroker.expiration_time_expiry_time_get, _pybroker.expiration_time_expiry_time_set)
    __swig_setmethods__["modification_time"] = _pybroker.expiration_time_modification_time_set
    __swig_getmethods__["modification_time"] = _pybroker.expiration_time_modification_time_get
    if _newclass:
        modification_time = _swig_property(_pybroker.expiration_time_modification_time_get, _pybroker.expiration_time_modification_time_set)
    tag_since_last_modification = _pybroker.expiration_time_tag_since_last_modification
    tag_absolute = _pybroker.expiration_time_tag_absolute
    __swig_setmethods__["type"] = _pybroker.expiration_time_type_set
    __swig_getmethods__["type"] = _pybroker.expiration_time_type_get
    if _newclass:
        type = _swig_property(_pybroker.expiration_time_type_get, _pybroker.expiration_time_type_set)

    def __init__(self, *args):
        this = _pybroker.new_expiration_time(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _pybroker.expiration_time___eq__(self, other)
    __swig_destroy__ = _pybroker.delete_expiration_time
    __del__ = lambda self: None
expiration_time_swigregister = _pybroker.expiration_time_swigregister
expiration_time_swigregister(expiration_time)

class expirable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, expirable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, expirable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _pybroker.expirable_key_set
    __swig_getmethods__["key"] = _pybroker.expirable_key_get
    if _newclass:
        key = _swig_property(_pybroker.expirable_key_get, _pybroker.expirable_key_set)
    __swig_setmethods__["expiry"] = _pybroker.expirable_expiry_set
    __swig_getmethods__["expiry"] = _pybroker.expirable_expiry_get
    if _newclass:
        expiry = _swig_property(_pybroker.expirable_expiry_get, _pybroker.expirable_expiry_set)

    def __eq__(self, other):
        return _pybroker.expirable___eq__(self, other)

    def __init__(self):
        this = _pybroker.new_expirable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybroker.delete_expirable
    __del__ = lambda self: None
expirable_swigregister = _pybroker.expirable_swigregister
expirable_swigregister(expirable)

class backend(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, backend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, backend, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_backend
    __del__ = lambda self: None

    def last_error(self):
        return _pybroker.backend_last_error(self)
backend_swigregister = _pybroker.backend_swigregister
backend_swigregister(backend)

class memory_backend(backend):
    __swig_setmethods__ = {}
    for _s in [backend]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, memory_backend, name, value)
    __swig_getmethods__ = {}
    for _s in [backend]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, memory_backend, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_memory_backend
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_memory_backend(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
memory_backend_swigregister = _pybroker.memory_backend_swigregister
memory_backend_swigregister(memory_backend)

class sqlite_backend(backend):
    __swig_setmethods__ = {}
    for _s in [backend]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sqlite_backend, name, value)
    __swig_getmethods__ = {}
    for _s in [backend]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, sqlite_backend, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_sqlite_backend
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_sqlite_backend(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def open(self, *args):
        return _pybroker.sqlite_backend_open(self, *args)

    def pragma(self, p):
        return _pybroker.sqlite_backend_pragma(self, p)

    def last_error_code(self):
        return _pybroker.sqlite_backend_last_error_code(self)
sqlite_backend_swigregister = _pybroker.sqlite_backend_swigregister
sqlite_backend_swigregister(sqlite_backend)

class query(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, query, name)
    __repr__ = _swig_repr
    tag_pop_left = _pybroker.query_tag_pop_left
    tag_pop_right = _pybroker.query_tag_pop_right
    tag_lookup = _pybroker.query_tag_lookup
    tag_exists = _pybroker.query_tag_exists
    tag_keys = _pybroker.query_tag_keys
    tag_size = _pybroker.query_tag_size
    tag_snapshot = _pybroker.query_tag_snapshot
    __swig_setmethods__["type"] = _pybroker.query_type_set
    __swig_getmethods__["type"] = _pybroker.query_type_get
    if _newclass:
        type = _swig_property(_pybroker.query_type_get, _pybroker.query_type_set)
    __swig_setmethods__["k"] = _pybroker.query_k_set
    __swig_getmethods__["k"] = _pybroker.query_k_get
    if _newclass:
        k = _swig_property(_pybroker.query_k_get, _pybroker.query_k_set)

    def __init__(self, *args):
        this = _pybroker.new_query(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _pybroker.query___eq__(self, other)
    __swig_destroy__ = _pybroker.delete_query
    __del__ = lambda self: None
query_swigregister = _pybroker.query_swigregister
query_swigregister(query)

class result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, result, name)
    __repr__ = _swig_repr
    tag_exists_result = _pybroker.result_tag_exists_result
    tag_size_result = _pybroker.result_tag_size_result
    tag_lookup_or_pop_result = _pybroker.result_tag_lookup_or_pop_result
    tag_keys_result = _pybroker.result_tag_keys_result
    tag_snapshot_result = _pybroker.result_tag_snapshot_result
    status_success = _pybroker.result_status_success
    status_failure = _pybroker.result_status_failure
    status_timeout = _pybroker.result_status_timeout
    __swig_setmethods__["stat"] = _pybroker.result_stat_set
    __swig_getmethods__["stat"] = _pybroker.result_stat_get
    if _newclass:
        stat = _swig_property(_pybroker.result_stat_get, _pybroker.result_stat_set)

    def __eq__(self, other):
        return _pybroker.result___eq__(self, other)

    def which(self):
        return _pybroker.result_which(self)

    def exists(self):
        return _pybroker.result_exists(self)

    def size(self):
        return _pybroker.result_size(self)

    def data(self):
        return _pybroker.result_data(self)

    def keys(self):
        return _pybroker.result_keys(self)

    def __init__(self):
        this = _pybroker.new_result()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybroker.delete_result
    __del__ = lambda self: None
result_swigregister = _pybroker.result_swigregister
result_swigregister(result)

class response(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, response, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, response, name)
    __repr__ = _swig_repr
    __swig_setmethods__["request"] = _pybroker.response_request_set
    __swig_getmethods__["request"] = _pybroker.response_request_get
    if _newclass:
        request = _swig_property(_pybroker.response_request_get, _pybroker.response_request_set)
    __swig_setmethods__["reply"] = _pybroker.response_reply_set
    __swig_getmethods__["reply"] = _pybroker.response_reply_get
    if _newclass:
        reply = _swig_property(_pybroker.response_reply_get, _pybroker.response_reply_set)
    __swig_setmethods__["cookie"] = _pybroker.response_cookie_set
    __swig_getmethods__["cookie"] = _pybroker.response_cookie_get
    if _newclass:
        cookie = _swig_property(_pybroker.response_cookie_get, _pybroker.response_cookie_set)

    def __eq__(self, other):
        return _pybroker.response___eq__(self, other)

    def __init__(self):
        this = _pybroker.new_response()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybroker.delete_response
    __del__ = lambda self: None
response_swigregister = _pybroker.response_swigregister
response_swigregister(response)

class deque_of_response(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deque_of_response, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deque_of_response, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pybroker.deque_of_response_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pybroker.deque_of_response___nonzero__(self)

    def __bool__(self):
        return _pybroker.deque_of_response___bool__(self)

    def __len__(self):
        return _pybroker.deque_of_response___len__(self)

    def __getslice__(self, i, j):
        return _pybroker.deque_of_response___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pybroker.deque_of_response___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pybroker.deque_of_response___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pybroker.deque_of_response___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pybroker.deque_of_response___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pybroker.deque_of_response___setitem__(self, *args)

    def pop(self):
        return _pybroker.deque_of_response_pop(self)

    def append(self, x):
        return _pybroker.deque_of_response_append(self, x)

    def empty(self):
        return _pybroker.deque_of_response_empty(self)

    def size(self):
        return _pybroker.deque_of_response_size(self)

    def swap(self, v):
        return _pybroker.deque_of_response_swap(self, v)

    def begin(self):
        return _pybroker.deque_of_response_begin(self)

    def end(self):
        return _pybroker.deque_of_response_end(self)

    def rbegin(self):
        return _pybroker.deque_of_response_rbegin(self)

    def rend(self):
        return _pybroker.deque_of_response_rend(self)

    def clear(self):
        return _pybroker.deque_of_response_clear(self)

    def get_allocator(self):
        return _pybroker.deque_of_response_get_allocator(self)

    def pop_back(self):
        return _pybroker.deque_of_response_pop_back(self)

    def erase(self, *args):
        return _pybroker.deque_of_response_erase(self, *args)

    def __init__(self, *args):
        this = _pybroker.new_deque_of_response(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pybroker.deque_of_response_push_back(self, x)

    def front(self):
        return _pybroker.deque_of_response_front(self)

    def back(self):
        return _pybroker.deque_of_response_back(self)

    def assign(self, n, x):
        return _pybroker.deque_of_response_assign(self, n, x)

    def resize(self, *args):
        return _pybroker.deque_of_response_resize(self, *args)

    def insert(self, *args):
        return _pybroker.deque_of_response_insert(self, *args)

    def pop_front(self):
        return _pybroker.deque_of_response_pop_front(self)

    def push_front(self, x):
        return _pybroker.deque_of_response_push_front(self, x)
    __swig_destroy__ = _pybroker.delete_deque_of_response
    __del__ = lambda self: None
deque_of_response_swigregister = _pybroker.deque_of_response_swigregister
deque_of_response_swigregister(deque_of_response)

class response_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, response_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, response_queue, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_response_queue
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_response_queue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fd(self):
        return _pybroker.response_queue_fd(self)

    def want_pop(self):
        return _pybroker.response_queue_want_pop(self)

    def need_pop(self):
        return _pybroker.response_queue_need_pop(self)

    def handle(self):
        return _pybroker.response_queue_handle(self)
response_queue_swigregister = _pybroker.response_queue_swigregister
response_queue_swigregister(response_queue)

class frontend(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, frontend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, frontend, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_frontend
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pybroker.new_frontend(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def id(self):
        return _pybroker.frontend_id(self)

    def responses(self):
        return _pybroker.frontend_responses(self)

    def insert(self, *args):
        return _pybroker.frontend_insert(self, *args)

    def erase(self, k):
        return _pybroker.frontend_erase(self, k)

    def clear(self):
        return _pybroker.frontend_clear(self)

    def increment(self, k, by=1):
        return _pybroker.frontend_increment(self, k, by)

    def decrement(self, k, by=1):
        return _pybroker.frontend_decrement(self, k, by)

    def add_to_set(self, k, element):
        return _pybroker.frontend_add_to_set(self, k, element)

    def remove_from_set(self, k, element):
        return _pybroker.frontend_remove_from_set(self, k, element)

    def push_left(self, k, items):
        return _pybroker.frontend_push_left(self, k, items)

    def push_right(self, k, items):
        return _pybroker.frontend_push_right(self, k, items)

    def request(self, *args):
        return _pybroker.frontend_request(self, *args)

    def pop_left(self, *args):
        return _pybroker.frontend_pop_left(self, *args)

    def pop_right(self, *args):
        return _pybroker.frontend_pop_right(self, *args)

    def lookup(self, *args):
        return _pybroker.frontend_lookup(self, *args)

    def exists(self, *args):
        return _pybroker.frontend_exists(self, *args)

    def keys(self, *args):
        return _pybroker.frontend_keys(self, *args)

    def size(self, *args):
        return _pybroker.frontend_size(self, *args)
frontend_swigregister = _pybroker.frontend_swigregister
frontend_swigregister(frontend)

class master(frontend):
    __swig_setmethods__ = {}
    for _s in [frontend]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, master, name, value)
    __swig_getmethods__ = {}
    for _s in [frontend]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, master, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_master
    __del__ = lambda self: None
    if _newclass:
        create = staticmethod(_pybroker.master_create)
    else:
        create = _pybroker.master_create
master_swigregister = _pybroker.master_swigregister
master_swigregister(master)
LOCAL_STORE = cvar.LOCAL_STORE
GLOBAL_STORE = cvar.GLOBAL_STORE

def master_create(e, name, b=None):
    return _pybroker.master_create(e, name, b)
master_create = _pybroker.master_create

class clone(frontend):
    __swig_setmethods__ = {}
    for _s in [frontend]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, clone, name, value)
    __swig_getmethods__ = {}
    for _s in [frontend]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, clone, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybroker.delete_clone
    __del__ = lambda self: None
    if _newclass:
        create = staticmethod(_pybroker.clone_create)
    else:
        create = _pybroker.clone_create
clone_swigregister = _pybroker.clone_swigregister
clone_swigregister(clone)

def clone_create(e, master_name, resync_interval, b=None):
    return _pybroker.clone_create(e, master_name, resync_interval, b)
clone_create = _pybroker.clone_create

# This file is compatible with both classic and new-style classes.


